//Time Complexity:O(m log m + n log n + m log n), where m and n are sizes of the two arrays.
// Space Complexity:O(1)



class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {

        int n1 = nums1.length;
        int n2 = nums2.length;

        if(n1 > n2){
            return intersect(nums2, nums1);
        }

        List<Integer> result = new ArrayList<>();

        Arrays.sort(nums1);
        Arrays.sort(nums2);

        int low = 0, high = n2-1;
        for(int num: nums1){
            int bsIdx = binarySearch(nums2, num, low, high);
            if(bsIdx != -1){
                result.add(num);
                low = bsIdx+1;
            }
        }

        int[] re = new int[result.size()];
        for(int i=0; i<result.size(); i++){
            re[i] = result.get(i);
        }

        return re;
    }

    private int binarySearch(int[] nums, int target, int low, int high){

        while(low <= high){
            int mid = low + (high - low)/2;
            if(nums[mid] == target) {
                if(mid == low || nums[mid-1] != nums[mid])
                {
                    return mid;
                }else{
                    high = mid - 1;
                }
            }
            else if(nums[mid] > target) high = mid - 1;
            else low = mid + 1;
        }

        return -1;
    }
}
